<?php

namespace Fenris\Bot;

use Longman\TelegramBot\Entities\InlineKeyboard;
use selector;
use selectorException;
use umiHierarchy;

/**
 * –ö–ª–∞—Å—Å –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 *
 * @package Fenris\Bot
 */
class Docs
{
    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
     *
     * @param int $id
     * @return array
     * @throws selectorException
     */
    public static function getDocs(int $id): array
    {
        $sel = new selector('pages');
        $sel->types('hierarchy-type')->name('content', 'page');
        $sel->where('domain')->equals(2);
        $sel->where('hierarchy')->page($id)->level(1);
        $sel->order('ord')->asc();
        $result = $sel->result();

        $keyboard = Docs::getKeyboard($result);

        if ($id !== 0) {
            $keyboard->addRow(
                [
                    'text' => '–í –∫–æ—Ä–Ω–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª',
                    'callback_data' => '/docs 0',
                ]
            );
        }

        $answer = $id === 0
            ? $answer = "–í –≥–ª–∞–≤–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏:\n\n"
            : Docs::getPageContent($id);

        return [
            'text' => $answer,
            'reply_markup' => $keyboard,
        ];
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     *
     * @return InlineKeyboard
     */
    public static function getInlineKeyboard(): InlineKeyboard
    {
        return new InlineKeyboard(
            [
                [
                    'text' => '–ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
                    'callback_data' => '/docs 0',
                ],
            ], [
                [
                    'text' => '–ú–æ–π –∞–≤—Ç–æ—Ä',
                    'url' => 'https://github.com/Fenris-v/',
                ],
            ]
        );
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–ª–±—ç–∫–∞–º–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
     *
     * @param $data
     * @return InlineKeyboard
     */
    private static function getKeyboard($data): InlineKeyboard
    {
        $keyboard = new InlineKeyboard([]);
        $row = [];
        foreach ($data as $key => $item) {
            $row[] = [
                'text' => $item->getName(),
                'callback_data' => '/docs ' . $item->getId(),
            ];

            if ($key % 2 === 0 && $key !== array_key_last($data)) {
                continue;
            }

            if (isset($row[1])) {
                $keyboard->addRow($row[0], $row[1]);
            } else {
                $keyboard->addRow($row[0]);
            }

            $row = [];
        }

        return $keyboard;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     *
     * @param int $id
     * @return string
     */
    private static function getPageContent(int $id): string
    {
        $page = umiHierarchy::getInstance()->getElement($id);
        $content = $page->getValue('content');

        $path = umiHierarchy::getInstance()->getPathById($id);

        return $content
            ? strip_tags($content) . "\n–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n$path"
            : "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üò¶ \n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∞–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ: \n$path";
    }
}
